@page "/users"
@using BugTrackerRedux.Models
@rendermode InteractiveServer

@if (_users is null)
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true"></MudProgressCircular>
    <MudText>Loading...</MudText>
}
else if (_users.Count == 0)
{
    <MudAlert Severity="Severity.Warning">No users to display.</MudAlert>
}
else
{
    <MudPaper>
        <MudTable T="UserModel.User" Items="_users" Hover="true">
            <HeaderContent>
                <MudTh>User Name</MudTh>
                <MudTh>First Name</MudTh>
                <MudTh>Last Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>User ID</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="User Name">@context.UserName</MudTd>
                <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="User ID">@context.UserId</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

@code {
    private List<UserModel.User> _users;

    private async Task<List<UserModel.User>> FetchAllUsers()
    {
        var users = await Http.GetFromJsonAsync<IList<UserModel.User>>("/api/getallusers");
        return users.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        _users = await FetchAllUsers();
    }

}